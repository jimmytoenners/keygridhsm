name: Dependency Management

on:
  schedule:
    # Run dependency checks weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Generate license report
      run: |
        echo "Generating license compliance report..."
        go-licenses csv ./... > licenses-report.csv || true
        go-licenses report ./... > licenses-report.txt || true
        
        # Check for problematic licenses
        echo "Checking for problematic licenses..."
        go-licenses check ./... > license-check.txt 2>&1 || true

    - name: Upload license artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses-report.csv
          licenses-report.txt
          license-check.txt

  module-updates:
    name: Module Updates Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Check for module updates
      run: |
        echo "Checking for available module updates..."
        go list -u -m all > modules-current.txt
        
        # Check which modules can be updated
        echo "Available updates:" > modules-updates.txt
        go list -u -m all | grep -E "\[.*\]" >> modules-updates.txt || echo "No updates available" >> modules-updates.txt
        
        # Generate go mod graph
        go mod graph > modules-graph.txt

    - name: Install govulncheck for module security
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Check module vulnerabilities
      run: |
        echo "Checking modules for known vulnerabilities..."
        govulncheck -json ./... > modules-vulnerabilities.json || true
        govulncheck ./... > modules-vulnerabilities.txt || true

    - name: Upload module artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: module-reports
        path: |
          modules-current.txt
          modules-updates.txt
          modules-graph.txt
          modules-vulnerabilities.json
          modules-vulnerabilities.txt

  outdated-dependencies:
    name: Outdated Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install go-mod-outdated
      run: go install github.com/psampaz/go-mod-outdated@latest

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        go list -u -m -json all | go-mod-outdated -update -direct > outdated-direct.txt || true
        go list -u -m -json all | go-mod-outdated -update > outdated-all.txt || true

    - name: Upload outdated dependencies report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies
        path: |
          outdated-direct.txt
          outdated-all.txt

  dependency-tree:
    name: Dependency Tree Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate dependency tree
      run: |
        echo "Generating dependency tree..."
        go mod graph | sort > dependency-graph.txt
        go list -m all > all-modules.txt
        
        # Generate visual dependency tree
        echo "Dependency Tree Visualization:" > dependency-tree.txt
        echo "============================" >> dependency-tree.txt
        go mod graph | sed 's/@[^ ]*//g' | sort | uniq >> dependency-tree.txt

    - name: Check module sizes
      run: |
        echo "Analyzing module sizes..."
        echo "Module Size Analysis:" > module-sizes.txt
        echo "====================" >> module-sizes.txt
        
        # Get module cache info
        if [ -d "$(go env GOMODCACHE)" ]; then
          find "$(go env GOMODCACHE)" -name "*.mod" -exec dirname {} \; | \
          while read dir; do
            size=$(du -sh "$dir" 2>/dev/null | cut -f1)
            module=$(basename "$dir")
            echo "$size $module" >> module-sizes.txt
          done | sort -hr | head -20 || true
        fi

    - name: Upload dependency tree artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-tree
        path: |
          dependency-graph.txt
          all-modules.txt
          dependency-tree.txt
          module-sizes.txt

  dependency-report:
    name: Dependency Report Summary
    runs-on: ubuntu-latest
    needs: [license-check, module-updates, outdated-dependencies, dependency-tree]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all dependency artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-reports"
        merge-multiple: true

    - name: Download additional artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "outdated-dependencies"
        merge-multiple: true

    - name: Download tree artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "dependency-tree"
        merge-multiple: true

    - name: Generate Dependency Summary
      run: |
        echo "# Dependency Management Report" > dependency-summary.md
        echo "Generated on: $(date)" >> dependency-summary.md
        echo "" >> dependency-summary.md
        
        echo "## License Compliance" >> dependency-summary.md
        if [ -f "license-check.txt" ]; then
          if grep -q "error\|problem\|forbidden" license-check.txt; then
            echo "⚠️ License compliance issues found:" >> dependency-summary.md
            echo '```' >> dependency-summary.md
            cat license-check.txt >> dependency-summary.md
            echo '```' >> dependency-summary.md
          else
            echo "✅ All licenses are compliant." >> dependency-summary.md
          fi
        else
          echo "License check not available." >> dependency-summary.md
        fi
        echo "" >> dependency-summary.md
        
        echo "## Available Module Updates" >> dependency-summary.md
        if [ -f "modules-updates.txt" ] && [ -s "modules-updates.txt" ]; then
          echo "Available updates:" >> dependency-summary.md
          echo '```' >> dependency-summary.md
          cat modules-updates.txt >> dependency-summary.md
          echo '```' >> dependency-summary.md
        else
          echo "✅ All modules are up to date." >> dependency-summary.md
        fi
        echo "" >> dependency-summary.md
        
        echo "## Security Vulnerabilities" >> dependency-summary.md
        if [ -f "modules-vulnerabilities.txt" ]; then
          if grep -q "vulnerability\|CVE" modules-vulnerabilities.txt; then
            echo "⚠️ Security vulnerabilities found:" >> dependency-summary.md
            echo '```' >> dependency-summary.md
            cat modules-vulnerabilities.txt >> dependency-summary.md
            echo '```' >> dependency-summary.md
          else
            echo "✅ No known vulnerabilities in dependencies." >> dependency-summary.md
          fi
        else
          echo "Vulnerability check not available." >> dependency-summary.md
        fi
        echo "" >> dependency-summary.md
        
        echo "## Outdated Dependencies" >> dependency-summary.md
        if [ -f "outdated-direct.txt" ] && [ -s "outdated-direct.txt" ]; then
          echo "Direct dependencies that can be updated:" >> dependency-summary.md
          echo '```' >> dependency-summary.md
          head -20 outdated-direct.txt >> dependency-summary.md
          echo '```' >> dependency-summary.md
        else
          echo "✅ All direct dependencies are current." >> dependency-summary.md
        fi
        echo "" >> dependency-summary.md
        
        echo "## Dependency Statistics" >> dependency-summary.md
        if [ -f "all-modules.txt" ]; then
          total_deps=$(wc -l < all-modules.txt)
          echo "- Total dependencies: $total_deps" >> dependency-summary.md
        fi
        
        if [ -f "dependency-graph.txt" ]; then
          unique_deps=$(cut -d' ' -f1 dependency-graph.txt | sort | uniq | wc -l)
          echo "- Unique dependencies: $unique_deps" >> dependency-summary.md
        fi
        
        echo "" >> dependency-summary.md
        echo "## Largest Dependencies" >> dependency-summary.md
        if [ -f "module-sizes.txt" ] && [ -s "module-sizes.txt" ]; then
          echo '```' >> dependency-summary.md
          head -10 module-sizes.txt >> dependency-summary.md
          echo '```' >> dependency-summary.md
        else
          echo "Module size information not available." >> dependency-summary.md
        fi

    - name: Upload Dependency Summary
      uses: actions/upload-artifact@v4
      with:
        name: dependency-summary
        path: dependency-summary.md

  create-update-pr:
    name: Create Update Pull Request
    runs-on: ubuntu-latest
    needs: [dependency-report]
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Update dependencies
      run: |
        echo "Updating Go modules..."
        go get -u ./...
        go mod tidy
        
        # Check if there are any changes
        if git diff --quiet go.mod go.sum; then
          echo "No dependency updates available"
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
        else
          echo "Dependency updates found"
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
        fi

    - name: Create Pull Request
      if: env.HAS_CHANGES == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Go dependencies"
        title: "chore: automated dependency updates"
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated updates to Go dependencies.
          
          ### Changes
          - Updated Go modules to latest versions
          - Updated go.mod and go.sum files
          
          ### Verification
          Please review the changes and ensure:
          - [ ] All tests pass
          - [ ] No breaking changes in updated dependencies
          - [ ] Security vulnerabilities are addressed
          - [ ] License compliance is maintained
          
          This PR was automatically generated by the dependency management workflow.
        branch: automated-dependency-updates
        delete-branch: true