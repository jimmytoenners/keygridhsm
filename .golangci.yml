# GolangCI-Lint configuration for KeyGrid HSM
# This configuration ensures high code quality standards for the project

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  go: "1.23"

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  govet:
    enable-all: true
    disable:
      - fieldalignment # Can be noisy for business logic
      - shadow # Use shadow linter instead
  
  golint:
    min-confidence: 0.8
  
  gocyclo:
    min-complexity: 15
  
  dupl:
    threshold: 100
  
  goconst:
    min-len: 3
    min-occurrences: 3
  
  misspell:
    locale: US
  
  lll:
    line-length: 120
  
  unused:
    check-exported: false
  
  unparam:
    check-exported: true
  
  nakedret:
    max-func-lines: 30
  
  prealloc:
    simple: true
    range-loops: true
    for-loops: false
  
  gocritic:
    enabled-tags:
      - performance
      - style
      - experimental
      - diagnostic
    disabled-checks:
      - commentedOutCode
      - whyNoLint
  
  goimports:
    local-prefixes: github.com/jimmy/keygridhsm
  
  godot:
    scope: declarations
    exclude:
      - "check interfaces"
  
  staticcheck:
    checks: ["all"]
  
  stylecheck:
    checks: ["all"]
  
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G104 # Audit errors not checked - we handle these selectively
    includes:
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G501 # Import blacklist: crypto/md5
      - G502 # Import blacklist: crypto/des
      - G503 # Import blacklist: crypto/rc4
      - G504 # Import blacklist: net/http/cgi
      - G505 # Import blacklist: crypto/sha1
  
  revive:
    min-confidence: 0.8
    rules:
      - name: var-naming
      - name: package-comments
      - name: range-val-in-closure
      - name: unreachable-code
      - name: redefines-builtin-id
      - name: superfluous-else
      - name: unused-parameter
      - name: indent-error-flow
      - name: empty-block
      - name: unused-receiver

linters:
  disable-all: true
  enable:
    # Essential linters
    - errcheck      # Check for unchecked errors
    - gosimple      # Simplify code
    - govet         # Vet examines Go source code
    - ineffassign   # Detect ineffectual assignments
    - staticcheck   # Advanced Go linter
    - typecheck     # Type-check Go code
    - unused        # Check for unused constants, variables, functions and types
    
    # Style and formatting
    - gofmt         # Check if code is gofmt-ed
    - goimports     # Check imports formatting
    - misspell      # Find commonly misspelled English words
    - revive        # Fast, configurable, extensible, flexible, and beautiful linter for Go
    
    # Complexity and maintainability
    - gocyclo       # Computes and checks cyclomatic complexity
    - dupl          # Code clone detection
    - goconst       # Find repeated strings that could be constants
    
    # Security
    - gosec         # Inspect source code for security problems
    
    # Performance
    - prealloc      # Find slice declarations with non-zero initial length
    
    # Bug detection
    - gocritic      # Comprehensive Go source code linter
    - nakedret      # Find naked returns in functions greater than a specified function length
    - unparam       # Report unused function parameters
    
    # Code style
    - godot         # Check if comments end in a period
    - lll           # Report long lines
    - stylecheck    # Stylecheck is a replacement for golint

  # Disabled linters (can be enabled as needed)
  # - deadcode      # Find unused code (deprecated, use unused instead)
  # - varcheck      # Find unused global variables and constants (deprecated)
  # - structcheck   # Find unused struct fields (deprecated)
  # - gocognit      # Cognitive complexity
  # - funlen        # Function length
  # - gochecknoinits # Check for init functions
  # - gochecknoglobals # Check for global variables
  # - gomnd         # Magic number detector
  # - wsl           # Whitespace linter

issues:
  exclude-use-default: false
  exclude-dirs:
    - vendor/
    - build/
    - dist/
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_test\\.go$" # Skip test files for some linters
  uniq-by-line: true
  exclude:
    # Exclude some staticcheck messages
    - "should have a package comment, unless it's in another file for this package"
    
  exclude-rules:
    # Exclude lll issues for long lines in comments
    - linters:
        - lll
      source: "^//.*$"
    
    # Exclude gosec G104 (unhandled errors) for specific patterns
    - linters:
        - gosec
      text: "G104.*os\\.Remove"
    
    # Allow underscore in test files
    - path: _test\.go
      linters:
        - unused
        - deadcode
        - varcheck
    
    # Allow longer functions in main packages
    - path: cmd/
      linters:
        - funlen
        - gocyclo
    
    # Exclude certain linters for generated files
    - path: ".*\\.pb\\.go$"
      linters:
        - all
    
    # Exclude error checking for defer statements
    - linters:
        - errcheck
      text: "defer.*Close"

  max-issues-per-linter: 50
  max-same-issues: 10

severity:
  default-severity: error
  case-sensitive: true
  rules:
    - linters:
        - revive
      severity: warning
    - linters:
        - stylecheck
      severity: info